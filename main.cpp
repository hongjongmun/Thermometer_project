#include "mbed.h"
#include "Adafruit_SSD1306.h"
#include "Adafruit_GFX.h"
#include "Adafruit_GFX_Config.h"

DigitalOut myled_R(LED1);
I2C i2c(I2C_SDA,I2C_SCL);
I2C i2c_oled(D12, A6);
//AnalogIn myswitch(D3);
DigitalIn myswitch(D3);

Timer t1;


Serial pc(USBTX, USBRX, 9600);
Serial bt(D1, D0, 9600); // HC-06 tx, rx

Adafruit_SSD1306_I2c myOled(i2c_oled,A0,0x78,64,128);

static unsigned char push[] = {
0x00, 0x00, 0xFC, 0x40, 0x40, 0x40, 0x40, 0x40, 0xFC, 0x40, 0x40, 0x40, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7E, 0x56, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0x80, 0x9C, 0xB6, 0xA2, 0xA2, 0xA2, 0xA2, 0xA2, 0xA6, 0x9C, 0x88, 0x80, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x64, 0x24, 0x24, 0x24, 0x24,
0x24, 0x24, 0x24, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0x00, 0x40, 0x40,
0x40, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x88, 0x04, 0x04, 0x04, 0x04,
0x04, 0x8C, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04,
0x07, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x7A, 0x42, 0x42, 0x42, 0x42,
0x42, 0x42, 0x42, 0x42, 0x42, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x76, 0x52, 0x52, 0x52, 0x52,
0x52, 0x52, 0x52, 0x5E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x7E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00,
0x10, 0x10, 0x11, 0x13, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x10, 0x10, 0x00, 0x00,
0x08, 0x0C, 0x07, 0x01, 0x01, 0x07, 0x0C, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00,
0x10, 0x10, 0x10, 0x1F, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x1F, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

static unsigned char bambam[] = {
0xC0, 0xC0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03,
0x03, 0x07, 0x0F, 0x0F, 0x1F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC,
0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF0,
0xF0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x00, 0x01, 0x01, 0x03, 0x07, 0x07, 0x0F,
0x1F, 0x1F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xE0, 0xC0,
0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xE0, 0xE0, 0xF0,
0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x3F,
0x3F, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00,
0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F,
0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0xFE, 0xFE, 0xFC, 0xFC, 0xFC,
0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC1, 0xC3, 0xC3, 0x87, 0x8F, 0x0F, 0x1F, 0x1F, 0x3F,
0x7F, 0x7F, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFE, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x87, 0x83, 0xC1,
0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7E, 0x7F, 0x7F, 0x3F, 0x3F, 0x1F, 0x1F, 0x1F, 0x0F,
0x0F, 0x07, 0x87, 0x87, 0x83, 0x83, 0x83, 0xC1, 0xC1, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0,
0xF0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE,
0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC,
0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xF1,
0xF1, 0xF1, 0xF1, 0xF1, 0xF3, 0xE3, 0xE3, 0xE3, 0xE7, 0xE7, 0xE7, 0xE7, 0xEF, 0xEF, 0xCF, 0xCE,
0xDE, 0xDC, 0xDC, 0xDD, 0xF9, 0xBB, 0xB3, 0xF7, 0xEF, 0xEF, 0xFE, 0xFC, 0xF9, 0xF7, 0xFF, 0xFF,
0xFF, 0xF0, 0xFC, 0xFF, 0xEF, 0xF7, 0xF3, 0xF9, 0xDC, 0x5C, 0x6E, 0x6F, 0x6F, 0x67, 0x77, 0x77,
0x73, 0x73, 0x39, 0x39, 0x39, 0x38, 0x3C, 0x3C, 0x3C, 0x3C, 0x3E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F,
0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07,
0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xF8,
0xF8, 0xF8, 0x78, 0x78, 0x78, 0x78, 0x78, 0x3C, 0x3C, 0x3C, 0x3C, 0x1C, 0x9C, 0x9C, 0x9C, 0xCC,
0xCE, 0xEE, 0xEE, 0xE6, 0xF6, 0x76, 0x76, 0x3B, 0x9F, 0xDF, 0xEF, 0xF7, 0xFF, 0x7F, 0x1F, 0xFF,
0xFF, 0xFF, 0xFF, 0xCF, 0x3F, 0x7F, 0xF7, 0xF7, 0xEF, 0xCF, 0xDF, 0x9B, 0xBB, 0x3B, 0x3B, 0x7B,
0x73, 0xF3, 0xF7, 0xF7, 0xE7, 0xE7, 0xE7, 0xE7, 0xC7, 0xC7, 0xCF, 0xCF, 0x8F, 0x8F, 0x8F, 0x8F,
0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
0x3F, 0x3F, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F,
0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x83, 0x83, 0xC1, 0xC1, 0xC1, 0xE1, 0xE0, 0xF0,
0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFE, 0x7E, 0x7E, 0x3F, 0x1F, 0x1F, 0x0F, 0x0F, 0x07,
0x83, 0xC3, 0xE1, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x01, 0x00, 0x00, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0x81, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFE, 0xFE,
0xFC, 0xF8, 0xF8, 0xF0, 0xF1, 0xE1, 0xC3, 0xC3, 0x83, 0x07, 0x07, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F,
0x3F, 0x3F, 0x7F, 0x7F, 0x7E, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8,
0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x80,
0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8,
0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x3F, 0x1F,
0x0F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x01,
0x03, 0x07, 0x0F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFC, 0xF8, 0xF8,
0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0x80, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0F,
0x0F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F,
0x3F, 0x3F, 0x1F, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0,
0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03
};

static unsigned char tem1[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFE, 0x3E, 0x0F, 0x07, 0x07, 0x07, 0x0E,
0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x61, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0x40, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0x57, 0x47, 0x41, 0xC7, 0x1C, 0x19, 0x00, 0x19, 0x5C,
0xC3, 0x43, 0x47, 0x53, 0xFF, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x0F, 0x1F, 0x3B, 0x78, 0xFC, 0xF0, 0xFC, 0xE6, 0xE3, 0x80, 0xE7, 0xEE,
0xF0, 0xF0, 0x78, 0x7B, 0x3F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static unsigned char tem2[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0xFE, 0x3E, 0x0F, 0x07, 0x07, 0x0F, 0x0F,
0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x61, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0x60, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xEF, 0xEF, 0x3F, 0x0F, 0x0F, 0x09, 0x0F, 0x1F,
0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x0F, 0x1F, 0x3F, 0x7F, 0xFD, 0xFE, 0xFF, 0xFE, 0xFC, 0xE4, 0xFE, 0xFE,
0xFF, 0xFD, 0x7D, 0x7F, 0x3F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static unsigned char tem3[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFE, 0xBE, 0x8F, 0x87, 0x87, 0x87, 0x8F,
0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x61, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0x40, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0x1F, 0x13, 0x3F, 0x00, 0x01, 0x03, 0x0F, 0x0C,
0x07, 0x3F, 0x1F, 0xFF, 0xFF, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x0F, 0x1F, 0x3F, 0x7F, 0xF8, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
0xE0, 0xF0, 0x78, 0x7F, 0x3F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static unsigned char ECG[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0,
0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x07,
0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFC,
0xF0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x07, 0x0F,
0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x7F, 0xFE, 0xFE, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFF, 0x7F, 0x3F, 0x1F,
0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7E, 0x7C, 0xFC,
0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x03, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static unsigned char figure1[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF8, 0xFC, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8, 0xF0,
0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
0xE0, 0xE0, 0xC8, 0xCC, 0x9F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFC, 0x38, 0x88, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC,
0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xFC, 0xFE, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF9, 0xF3, 0xE7, 0xCF, 0x9F, 0x9F, 0x3F, 0x7F,
0x7F, 0x7F, 0x1F, 0xC7, 0xE1, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x1E, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x8F, 0xC3,
0xF0, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFD, 0xF9, 0xFB,
0xF3, 0xE7, 0xEF, 0x9F, 0x1F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07,
0x0F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0xC7, 0xE1, 0xF8, 0xFE, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x3F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F,
0x0F, 0x1F, 0x1F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static unsigned char figure2[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFC, 0xF0, 0xE0, 0xC0, 0x80,
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0xA0, 0x70, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0x3E, 0x8E, 0xE7, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFE, 0xFC, 0xFC, 0xF8, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFE,
0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFD, 0xFB, 0xF7, 0xE7, 0xEF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF, 0xDF,
0x1F, 0x1F, 0xC7, 0xD1, 0xDC, 0x9F, 0x9F, 0xBF, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7C, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0xCF, 0xE3, 0xF8,
0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF9, 0xF3, 0xE7, 0xCF,
0x9F, 0x3F, 0x7F, 0xFF, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07, 0x0F, 0x1F,
0x1F, 0x3F, 0x3F, 0x3F, 0x7F, 0x7F, 0x7F, 0x3F, 0x0F, 0xC3, 0xF1, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x3F, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07,
0x0F, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x07,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static unsigned char figure3[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xC0, 0xC0, 0x80, 0x80,
0x80, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0x40, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x8F, 0xC3, 0xF1, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC,
0xF8, 0xF0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0,
0xF8, 0xFE, 0xFE, 0xFC, 0xF9, 0xF3, 0xF3, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0x37,
0x07, 0xC3, 0xE1, 0xE0, 0xCE, 0x9F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x87, 0xE3, 0xF8, 0xFC,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xF9, 0xE7, 0xCF, 0xDF, 0x9F, 0x3F,
0x7F, 0xFF, 0xFF, 0xFF, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0F, 0x0F,
0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x3F, 0x1F, 0x07, 0x43, 0x70, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFE, 0x3E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x0F,
0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x07,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0F, 0x1F, 0x1F, 0x07, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static unsigned char figure4[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0,
0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x87, 0xE1, 0xF0, 0xFC, 0xFF, 0xFE, 0xFC, 0xF0, 0xE0, 0xC0,
0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0,
0xF0, 0xF8, 0xFC, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFC, 0xFD, 0xF9, 0xF9, 0x33,
0x07, 0x07, 0x81, 0x10, 0x38, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x83, 0xE0, 0xF8,
0xFC, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xF9, 0xFB, 0xF7, 0xE7, 0xCF, 0xDF, 0xDF, 0x9F, 0xBF, 0xBF,
0x3F, 0xBF, 0x3F, 0x3F, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03,
0x03, 0x07, 0x07, 0x0F, 0x1F, 0x1F, 0x1F, 0x0F, 0x03, 0xC1, 0xF0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x3F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F,
0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x07,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x07, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static unsigned char figure5[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8,
0xF8, 0xF8, 0xF8, 0xF0, 0xE0, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFC, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x87, 0xE0, 0xF0, 0xF8, 0xF0, 0xE0, 0xE0, 0xC0, 0xC0,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xF0, 0xF8,
0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFC, 0xF9, 0xF3, 0xE7, 0xCF,
0x1F, 0x1F, 0x0F, 0xC3, 0xE0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70, 0x78, 0x7C, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x83, 0xC1,
0xF8, 0xFC, 0xFE, 0xFC, 0xFD, 0xF9, 0xF3, 0xF7, 0xE7, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF,
0xEF, 0xEF, 0xCF, 0xCF, 0x1F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7F, 0x3F, 0x1F, 0x07, 0x81, 0xE0, 0xF8, 0xFE, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x3F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x0F, 0x1F, 0x1F, 0x3F,
0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x07, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void left_push_button2(){ // 왼쪽 푸시x 버튼 오른쪽 푸시 버튼  미국버전
    
    int x1 = 10;
    int y1 = 49;
    int x3 = 70;
    int y3 = 49;
    
    //myOled.begin();
    //myOled.clearDisplay();
    myOled.setTextSize(1);
    myOled.setTextColor(WHITE);
    myOled.setTextCursor(24,0);
    myOled.printf("push button");
    myOled.drawTriangle(15, 6, 18, 1, 21, 6, WHITE); // 글자 왼쪽 별모양
    myOled.drawTriangle(15, 2, 18, 7, 21, 2, WHITE); // 글자 왼쪽 별모양
    myOled.drawRoundRect(x1, y1, 40, 13, 2, WHITE);
    myOled.drawLine(x1, y1, x1+10, y1-13, WHITE);
    myOled.drawLine(x1+10, y1-13, x1+20, y1-13, WHITE);
    myOled.drawLine(x1+20, y1-13, x1+25, y1-29, WHITE); // 버튼
    myOled.drawLine(x1+20, y1-13, x1+15, y1-7, WHITE); // 버튼
    myOled.drawLine(x1+25, y1-29, x1+37, y1-29, WHITE); // 윗면버튼
    myOled.drawLine(x1+40, y1-13, x1+37, y1-29, WHITE); // 버튼
    myOled.drawLine(x1+40, y1-13, x1+42, y1-7, WHITE); // 버튼
    myOled.drawLine(x1+40, y1-13, x1+50, y1-13, WHITE);
    myOled.drawLine(x1+40, y1-1, x1+50, y1-13, WHITE);
    myOled.drawLine(x1+50, y1-13, x1+50, y1, WHITE);
    myOled.drawLine(x1+50, y1, x1+40, y1+12, WHITE);
    
    myOled.drawRoundRect(x3, y3, 40, 13, 2, WHITE);
    myOled.drawLine(x3, y3, x3+10, y3-13, WHITE);
    myOled.drawLine(x3+10, y3-13, x3+20, y3-13, WHITE);
    myOled.drawLine(x3+20, y3-13, x3+23, y3-18, WHITE); // 버튼 
    myOled.drawLine(x3+20, y3-13, x3+15, y3-7, WHITE); // 버튼 
    myOled.drawLine(x3+23, y3-18, x3+37, y3-18, WHITE); // 윗면버튼 수정  @@누름버튼
    myOled.drawLine(x3+40, y3-13, x3+37, y3-18, WHITE); // 버튼
    myOled.drawLine(x3+40, y3-13, x3+42, y3-7, WHITE); // 버튼 
    myOled.drawLine(x3+40, y3-13, x3+50, y3-13, WHITE);
    myOled.drawLine(x3+40, y3-1, x3+50, y3-13, WHITE);
    myOled.drawLine(x3+50, y3-13, x3+50, y3, WHITE);
    myOled.drawLine(x3+50, y3, x3+40, y3+12, WHITE);
    
    myOled.drawLine(x3+23, y3-20, x3+20, y3-25, WHITE); // 왼쪽누름표시
    myOled.drawLine(x3+20, y3-20, x3+17, y3-25, WHITE); // 왼쪽누름표시
    myOled.drawLine(x3+37, y3-20, x3+40, y3-25, WHITE); // 오른쪽누름표시
    myOled.drawLine(x3+40, y3-20, x3+43, y3-25, WHITE); // 오른쪽누름표시
    
    myOled.display();

}    
void right_push_button2(){    // 오른쪽 푸시x 버튼 왼쪽 푸시 버튼   미국버전
    int x2 = 70;
    int y2 = 49;
    int x4 = 10;
    int y4 = 49;
    
    //myOled.begin();
    //myOled.clearDisplay();
    myOled.setTextSize(1);
    myOled.setTextColor(WHITE);
    myOled.setTextCursor(24,0);
    myOled.printf("push button");
    myOled.drawTriangle(90, 6, 93, 1, 96, 6, WHITE); // 글자 오른쪽 별모양
    myOled.drawTriangle(90, 2, 93, 7, 96, 2, WHITE); // 글자 오른쪽 별모양
    
    myOled.drawRoundRect(x2, y2, 40, 13, 2, WHITE);
    myOled.drawLine(x2, y2, x2+10, y2-13, WHITE);
    myOled.drawLine(x2+10, y2-13, x2+20, y2-13, WHITE);
    myOled.drawLine(x2+20, y2-13, x2+25, y2-29, WHITE); // 버튼
    myOled.drawLine(x2+20, y2-13, x2+15, y2-7, WHITE); // 버튼
    myOled.drawLine(x2+25, y2-29, x2+37, y2-29, WHITE); // 윗면버튼
    myOled.drawLine(x2+40, y2-13, x2+37, y2-29, WHITE); // 버튼
    myOled.drawLine(x2+40, y2-13, x2+42, y2-7, WHITE); // 버튼
    myOled.drawLine(x2+40, y2-13, x2+50, y2-13, WHITE);
    myOled.drawLine(x2+40, y2-1, x2+50, y2-13, WHITE);
    myOled.drawLine(x2+50, y2-13, x2+50, y2, WHITE);
    myOled.drawLine(x2+50, y2, x2+40, y2+12, WHITE);
    
    myOled.drawRoundRect(x4, y4, 40, 13, 2, WHITE);
    myOled.drawLine(x4, y4, x4+10, y4-13, WHITE);
    myOled.drawLine(x4+10, y4-13, x4+20, y4-13, WHITE);
    myOled.drawLine(x4+20, y4-13, x4+23, y4-18, WHITE); // 버튼 
    myOled.drawLine(x4+20, y4-13, x4+15, y4-7, WHITE); // 버튼 
    myOled.drawLine(x4+23, y4-18, x4+37, y4-18, WHITE); // 윗면버튼 수정  @@누름버튼
    myOled.drawLine(x4+40, y4-13, x4+37, y4-18, WHITE); // 버튼
    myOled.drawLine(x4+40, y4-13, x4+42, y4-7, WHITE); // 버튼 
    myOled.drawLine(x4+40, y4-13, x4+50, y4-13, WHITE);
    myOled.drawLine(x4+40, y4-1, x4+50, y4-13, WHITE);
    myOled.drawLine(x4+50, y4-13, x4+50, y4, WHITE);
    myOled.drawLine(x4+50, y4, x4+40, y4+12, WHITE);
    
    myOled.drawLine(x4+23, y4-20, x4+20, y4-25, WHITE); // 왼쪽누름표시
    myOled.drawLine(x4+20, y4-20, x4+17, y4-25, WHITE); // 왼쪽누름표시
    myOled.drawLine(x4+37, y4-20, x4+40, y4-25, WHITE); // 오른쪽누름표시
    myOled.drawLine(x4+40, y4-20, x4+43, y4-25, WHITE); // 오른쪽누름표시
    
    myOled.display();

}

void left_push_button(){ // 왼쪽 푸시x 버튼 오른쪽 푸시 버튼
    
    int x1 = 10;
    int y1 = 49;
    int x3 = 70;
    int y3 = 49;
    
    //myOled.begin();
    //myOled.clearDisplay();
    myOled.setTextSize(1);
    myOled.setTextColor(WHITE);
    //myOled.setTextCursor(24,0);
    //myOled.printf("push button");
    //myOled.drawTriangle(15, 6, 18, 1, 21, 6, WHITE); // 글자 왼쪽 별모양
    //myOled.drawTriangle(15, 2, 18, 7, 21, 2, WHITE); // 글자 왼쪽 별모양
    myOled.drawBitmap(0,0,push, 120,17,WHITE);
    
    myOled.drawRoundRect(x1, y1, 40, 13, 2, WHITE);
    myOled.drawLine(x1, y1, x1+10, y1-13, WHITE);
    myOled.drawLine(x1+10, y1-13, x1+20, y1-13, WHITE);
    myOled.drawLine(x1+20, y1-13, x1+25, y1-29, WHITE); // 버튼
    myOled.drawLine(x1+20, y1-13, x1+15, y1-7, WHITE); // 버튼
    myOled.drawLine(x1+25, y1-29, x1+37, y1-29, WHITE); // 윗면버튼
    myOled.drawLine(x1+40, y1-13, x1+37, y1-29, WHITE); // 버튼
    myOled.drawLine(x1+40, y1-13, x1+42, y1-7, WHITE); // 버튼
    myOled.drawLine(x1+40, y1-13, x1+50, y1-13, WHITE);
    myOled.drawLine(x1+40, y1-1, x1+50, y1-13, WHITE);
    myOled.drawLine(x1+50, y1-13, x1+50, y1, WHITE);
    myOled.drawLine(x1+50, y1, x1+40, y1+12, WHITE);
    
    myOled.drawRoundRect(x3, y3, 40, 13, 2, WHITE);
    myOled.drawLine(x3, y3, x3+10, y3-13, WHITE);
    myOled.drawLine(x3+10, y3-13, x3+20, y3-13, WHITE);
    myOled.drawLine(x3+20, y3-13, x3+23, y3-18, WHITE); // 버튼 
    myOled.drawLine(x3+20, y3-13, x3+15, y3-7, WHITE); // 버튼 
    myOled.drawLine(x3+23, y3-18, x3+37, y3-18, WHITE); // 윗면버튼 수정  @@누름버튼
    myOled.drawLine(x3+40, y3-13, x3+37, y3-18, WHITE); // 버튼
    myOled.drawLine(x3+40, y3-13, x3+42, y3-7, WHITE); // 버튼 
    myOled.drawLine(x3+40, y3-13, x3+50, y3-13, WHITE);
    myOled.drawLine(x3+40, y3-1, x3+50, y3-13, WHITE);
    myOled.drawLine(x3+50, y3-13, x3+50, y3, WHITE);
    myOled.drawLine(x3+50, y3, x3+40, y3+12, WHITE);
    
    myOled.drawLine(x3+23, y3-20, x3+20, y3-25, WHITE); // 왼쪽누름표시
    myOled.drawLine(x3+20, y3-20, x3+17, y3-25, WHITE); // 왼쪽누름표시
    myOled.drawLine(x3+37, y3-20, x3+40, y3-25, WHITE); // 오른쪽누름표시
    myOled.drawLine(x3+40, y3-20, x3+43, y3-25, WHITE); // 오른쪽누름표시
    
    myOled.display();

}    
void right_push_button(){    // 오른쪽 푸시x 버튼 왼쪽 푸시 버튼
    int x2 = 70;
    int y2 = 49;
    int x4 = 10;
    int y4 = 49;
    
    //myOled.begin();
    //myOled.clearDisplay();
    myOled.setTextSize(1);
    myOled.setTextColor(WHITE);
    myOled.setTextCursor(24,0);
    //myOled.printf("push button");
    //myOled.drawTriangle(90, 6, 93, 1, 96, 6, WHITE); // 글자 오른쪽 별모양
    //myOled.drawTriangle(90, 2, 93, 7, 96, 2, WHITE); // 글자 오른쪽 별모양
    myOled.drawBitmap(0,0,push, 120,17,WHITE);
    
    myOled.drawRoundRect(x2, y2, 40, 13, 2, WHITE);
    myOled.drawLine(x2, y2, x2+10, y2-13, WHITE);
    myOled.drawLine(x2+10, y2-13, x2+20, y2-13, WHITE);
    myOled.drawLine(x2+20, y2-13, x2+25, y2-29, WHITE); // 버튼
    myOled.drawLine(x2+20, y2-13, x2+15, y2-7, WHITE); // 버튼
    myOled.drawLine(x2+25, y2-29, x2+37, y2-29, WHITE); // 윗면버튼
    myOled.drawLine(x2+40, y2-13, x2+37, y2-29, WHITE); // 버튼
    myOled.drawLine(x2+40, y2-13, x2+42, y2-7, WHITE); // 버튼
    myOled.drawLine(x2+40, y2-13, x2+50, y2-13, WHITE);
    myOled.drawLine(x2+40, y2-1, x2+50, y2-13, WHITE);
    myOled.drawLine(x2+50, y2-13, x2+50, y2, WHITE);
    myOled.drawLine(x2+50, y2, x2+40, y2+12, WHITE);
    
    myOled.drawRoundRect(x4, y4, 40, 13, 2, WHITE);
    myOled.drawLine(x4, y4, x4+10, y4-13, WHITE);
    myOled.drawLine(x4+10, y4-13, x4+20, y4-13, WHITE);
    myOled.drawLine(x4+20, y4-13, x4+23, y4-18, WHITE); // 버튼 
    myOled.drawLine(x4+20, y4-13, x4+15, y4-7, WHITE); // 버튼 
    myOled.drawLine(x4+23, y4-18, x4+37, y4-18, WHITE); // 윗면버튼 수정  @@누름버튼
    myOled.drawLine(x4+40, y4-13, x4+37, y4-18, WHITE); // 버튼
    myOled.drawLine(x4+40, y4-13, x4+42, y4-7, WHITE); // 버튼 
    myOled.drawLine(x4+40, y4-13, x4+50, y4-13, WHITE);
    myOled.drawLine(x4+40, y4-1, x4+50, y4-13, WHITE);
    myOled.drawLine(x4+50, y4-13, x4+50, y4, WHITE);
    myOled.drawLine(x4+50, y4, x4+40, y4+12, WHITE);
    
    myOled.drawLine(x4+23, y4-20, x4+20, y4-25, WHITE); // 왼쪽누름표시
    myOled.drawLine(x4+20, y4-20, x4+17, y4-25, WHITE); // 왼쪽누름표시
    myOled.drawLine(x4+37, y4-20, x4+40, y4-25, WHITE); // 오른쪽누름표시
    myOled.drawLine(x4+40, y4-20, x4+43, y4-25, WHITE); // 오른쪽누름표시
    
    myOled.display();

}

void myOled_startwindow() {
    int a = 0;
    int b = 0;
    
    myOled.begin();
    myOled.clearDisplay();
    myOled.setTextSize(1);
    myOled.setTextColor(WHITE);
    myOled.setTextCursor(0,0);
    myOled.printf("Battery charging");
    myOled.drawRoundRect(60, 10, 10, 10, 2, WHITE); //꼭다리 
    myOled.drawRoundRect(45, 20, 40, 42, 6, WHITE); //몸통
    Timer t2;
    Timer t3;
    t2.start();
    t3.start();
    while(t2.read()<=4) // 4초동안 와일문을 반복한다.
    {
        int x1 = 8;
        int y1 = 34;
        int x2 = 120;
        int y2 = 34;
        
        while(t3.read_ms()<= 1400) // 1.4 초까지 와일문을 반복한다.
        {   
            
            myOled.setTextSize(1);
            myOled.setTextColor(WHITE);
            myOled.setTextCursor(0,0);
            myOled.printf("Battery charging");                     
            
            myOled.drawRoundRect(60, 10, 10, 10, 2, WHITE); //꼭다리 
            myOled.drawRoundRect(45, 20, 40, 42, 6, WHITE); //몸통

            myOled.drawLine(65, 30, 58, 41, BLACK); // {
            myOled.drawLine(58, 41, 65, 41, BLACK); //
            myOled.drawLine(65, 41, 63, 53, BLACK); //  검은번개그리기
            myOled.drawLine(65, 30, 65, 36, BLACK); // 
            myOled.drawLine(65, 36, 72, 36, BLACK); //
            myOled.drawLine(72, 36, 63, 53, BLACK); // }  
            
            myOled.drawLine(x1, y1, x1, y1+6, WHITE); // {
            myOled.drawLine(x1, y1+6, x1+7, y1+6, WHITE); //
            myOled.drawLine(x1+7, y1+6, x1-2, y1+25, WHITE); //  왼쪽 번개움직임 그리기
            myOled.drawLine(x1-2, y1+25, x1, y1+11, WHITE); // 
            myOled.drawLine(x1, y1+11, x1-7, y1+11, WHITE); //
            myOled.drawLine(x1-7, y1+11, x1, y1, WHITE); // }
            
            myOled.drawLine(x2, y2, x2, y2+6, WHITE); // {
            myOled.drawLine(x2, y2+6, x2+7, y2+6, WHITE); //
            myOled.drawLine(x2+7, y2+6, x2-2, y2+25, WHITE); //  오른쪽 번개움직임그리기
            myOled.drawLine(x2-2, y2+25, x2, y2+11, WHITE); // 
            myOled.drawLine(x2, y2+11, x2-7, y2+11, WHITE); //
            myOled.drawLine(x2-7, y2+11, x2, y2, WHITE); // }            
            myOled.display();
            wait_ms(100);
            myOled.clearDisplay();
            x2 = x2 - 4;
            y2 = y2 - 2;            
            x1 = x1 + 4;
            y1 = y1 - 2;
            
        }
        myOled.setTextSize(1);
        myOled.setTextColor(WHITE);
        myOled.setTextCursor(0,0);
        myOled.printf("Battery charging");
        
        myOled.drawRoundRect(60, 10, 10, 10, 2, WHITE); //꼭다리 
        myOled.drawRoundRect(45, 20, 40, 42, 6, WHITE); //몸통
        myOled.fillRoundRect(45, 48, 40, 14, 5, WHITE); //첫번째 칸 채우기
        
        myOled.drawLine(65, 30, 58, 41, BLACK); // {
        myOled.drawLine(58, 41, 65, 41, BLACK); //
        myOled.drawLine(65, 41, 63, 53, BLACK); //  검은번개그리기
        myOled.drawLine(65, 30, 65, 36, BLACK); // 
        myOled.drawLine(65, 36, 72, 36, BLACK); //
        myOled.drawLine(72, 36, 63, 53, BLACK); // } 
        
                
        int x3 = 120;
        int y3 = 34;
        int x4 = 8;
        int y4 = 34;       
        while(t3.read_ms()<= 2800) // 2.8 초까지 와일문을 반복한다.
        {
                    
            
            
            myOled.setTextSize(1);
            myOled.setTextColor(WHITE);
            myOled.setTextCursor(0,0);
            myOled.printf("Battery charging.");          
            
            myOled.drawRoundRect(60, 10, 10, 10, 2, WHITE); //꼭다리 
            myOled.drawRoundRect(45, 20, 40, 42, 6, WHITE); //몸통
            myOled.fillRoundRect(45, 48, 40, 14, 5, WHITE); //첫번째 칸 채우기
            
            myOled.drawLine(65, 30, 58, 41, BLACK); // {
            myOled.drawLine(58, 41, 65, 41, BLACK); //
            myOled.drawLine(65, 41, 63, 53, BLACK); //  검은번개그리기
            myOled.drawLine(65, 30, 65, 36, BLACK); // 
            myOled.drawLine(65, 36, 72, 36, BLACK); //
            myOled.drawLine(72, 36, 63, 53, BLACK); // }  
            
            myOled.drawLine(x4, y4, x4, y4+6, WHITE); // {
            myOled.drawLine(x4, y4+6, x4+7, y4+6, WHITE); //
            myOled.drawLine(x4+7, y4+6, x4-2, y4+25, WHITE); //  왼쪽 번개움직임 그리기
            myOled.drawLine(x4-2, y4+25, x4, y4+11, WHITE); // 
            myOled.drawLine(x4, y4+11, x4-7, y4+11, WHITE); //
            myOled.drawLine(x4-7, y4+11, x4, y4, WHITE); // }                       
            
            myOled.drawLine(x3, y3, x3, y3+6, WHITE); // {
            myOled.drawLine(x3, y3+6, x3+7, y3+6, WHITE); //
            myOled.drawLine(x3+7, y3+6, x3-2, y3+25, WHITE); // 오른쪽 번개움직임그리기
            myOled.drawLine(x3-2, y3+25, x3, y3+11, WHITE); // 
            myOled.drawLine(x3, y3+11, x3-7, y3+11, WHITE); //
            myOled.drawLine(x3-7, y3+11, x3, y3, WHITE); // }
            myOled.display();
            wait_ms(100);
            myOled.clearDisplay();
            x3 = x3 - 4;
            y3 = y3 - 2;
            x4 = x4 + 4;
            y4 = y4 - 2;            
            
        }
        myOled.setTextSize(1);
        myOled.setTextColor(WHITE);
        myOled.setTextCursor(0,0);
        myOled.printf("Battery charging.");
        
        myOled.drawRoundRect(60, 10, 10, 10, 2, WHITE); //꼭다리 
        myOled.drawRoundRect(45, 20, 40, 42, 6, WHITE); //몸통
        myOled.fillRoundRect(45, 48, 40, 14, 5, WHITE); //첫번째 칸 채우기
        myOled.fillRoundRect(45, 34, 40, 14, 5, WHITE); //두번째 칸 채우기
        
        myOled.drawLine(65, 30, 58, 41, BLACK); // {
        myOled.drawLine(58, 41, 65, 41, BLACK); //
        myOled.drawLine(65, 41, 63, 53, BLACK); //  검은번개그리기
        myOled.drawLine(65, 30, 65, 36, BLACK); // 
        myOled.drawLine(65, 36, 72, 36, BLACK); //
        myOled.drawLine(72, 36, 63, 53, BLACK); // } 
                
        int x5 = 8;
        int y5 = 34;
        int x6 = 120;
        int y6 = 34;        
        while(t3.read_ms()<=4000) // 4 초동안 와일문을 반복한다.
        {
            
            
            myOled.setTextSize(1);
            myOled.setTextColor(WHITE);
            myOled.setTextCursor(0,0);
            myOled.printf("Battery charging..");     
            
            myOled.drawRoundRect(60, 10, 10, 10, 2, WHITE); //꼭다리 
            myOled.drawRoundRect(45, 20, 40, 42, 6, WHITE); //몸통
            myOled.fillRoundRect(45, 48, 40, 14, 5, WHITE); //첫번째 칸 채우기
            myOled.fillRoundRect(45, 34, 40, 14, 5, WHITE); //두번째 칸 채우기
            
            myOled.drawLine(65, 30, 58, 41, BLACK); // {
            myOled.drawLine(58, 41, 65, 41, BLACK); //
            myOled.drawLine(65, 41, 63, 53, BLACK); //  검은 번개그리기
            myOled.drawLine(65, 30, 65, 36, BLACK); // 
            myOled.drawLine(65, 36, 72, 36, BLACK); //
            myOled.drawLine(72, 36, 63, 53, BLACK); // }    
                        
            myOled.drawLine(x5, y5, x5, y5+6, WHITE); // {
            myOled.drawLine(x5, y5+6, x5+7, y5+6, WHITE); //
            myOled.drawLine(x5+7, y5+6, x5-2, y5+25, WHITE); //  번개움직임그리기
            myOled.drawLine(x5-2, y5+25, x5, y5+11, WHITE); // 
            myOled.drawLine(x5, y5+11, x5-7, y5+11, WHITE); //
            myOled.drawLine(x5-7, y5+11, x5, y5, WHITE); // }
            
            myOled.drawLine(x6, y6, x6, y6+6, WHITE); // {
            myOled.drawLine(x6, y6+6, x6+7, y6+6, WHITE); //
            myOled.drawLine(x6+7, y6+6, x6-2, y6+25, WHITE); // 오른쪽 번개움직임그리기
            myOled.drawLine(x6-2, y6+25, x6, y6+11, WHITE); // 
            myOled.drawLine(x6, y6+11, x6-7, y6+11, WHITE); //
            myOled.drawLine(x6-7, y6+11, x6, y6, WHITE); // }            
            myOled.display();
            wait_ms(100);
            myOled.clearDisplay();
            x5 = x5 + 4;
            y5 = y5 - 2;
            x6 = x6 - 4;
            y6 = y6 - 2;            
            
        }
        t3.reset();
    }
    myOled.setTextSize(1);
    myOled.setTextColor(WHITE);
    myOled.setTextCursor(0,0);
    myOled.printf("Battery charging...");
    myOled.drawRoundRect(60, 10, 10, 10, 2, WHITE); //꼭다리 
    myOled.drawRoundRect(45, 20, 40, 42, 6, WHITE); //몸통
    myOled.fillRoundRect(45, 48, 40, 14, 5, WHITE); //첫번째 칸 채우기
    myOled.fillRoundRect(45, 34, 40, 14, 5, WHITE); //두번째 칸 채우기
    myOled.fillRoundRect(45, 20, 40, 14, 5, WHITE); //세번째 칸 채우기
    myOled.fillRoundRect(60, 10, 10, 10, 2, WHITE); //꼭다리 채우기
    myOled.drawLine(65, 30, 58, 41, BLACK); // {
    myOled.drawLine(58, 41, 65, 41, BLACK); //
    myOled.drawLine(65, 41, 63, 53, BLACK); //  번개그리기
    myOled.drawLine(65, 30, 65, 36, BLACK); // 
    myOled.drawLine(65, 36, 72, 36, BLACK); //
    myOled.drawLine(72, 36, 63, 53, BLACK); // }
    myOled.display();
    //delay(2000);
}
    

    
bool getTemp(float* temp_val){
    char ch1, ch2;
    char cmd[2];
    cmd[0] = 0x07;
    cmd[1] = 0;
    //cmd[2] = 0;
    i2c.stop();
    wait_us(5);
    
    ch1 = i2c.write(0xb4, cmd, 1, true);  
    if (ch1 != 0) {return false;}
    ch2 = i2c.read(0xb5, cmd, 2);
    if (ch2 != 0) {return false;}
    wait_us(5);
    *temp_val = ((((cmd[1]&0x007f)<<8)+cmd[0])*0.02)-273.15;
    return true;
}


bool getTempAmbient(float* temp_val){
    char ch1, ch2;
    char cmd[2];
    cmd[0] = 0x06;
    cmd[1] = 0;
    //cmd[2] = 0;
    i2c.stop();
    wait_us(5);
    ch1 = i2c.write(0xb4, cmd, 1, true);
    if (ch1 != 0) {return false;}
    ch2 = i2c.read(0xb5, cmd, 2);
    if (ch2 != 0) {return false;}
    wait_us(5);
    
    *temp_val = ((((cmd[1]&0x007f)<<8)+cmd[0])*0.02)-273.15;
    return true;
}

bool getRawIR(int16_t* ir_val){
    char ch1, ch2;
    char cmd[2];
    uint16_t temp;
    cmd[0] = 0x04;
    cmd[1] = 0;
    //cmd[2] = 0;
    i2c.stop();
    wait_us(5);
    
    ch1 = i2c.write(0xb4, cmd, 1, true);
    if (ch1 != 0) {return false;}
    ch2 = i2c.read(0xb5, cmd, 2);
    if (ch2 != 0) {return false;}
    wait_us(5);
    temp = (uint16_t)((cmd[1]<<8)|cmd[0]);
    if(temp & 0x8000) *ir_val = ~((int16_t)(temp & 0x7fff))+1;
    else *ir_val = (int16_t)temp;
    return true;
}

void myOled_config() {
    myOled.begin(); 
    myOled.setTextCursor(0,0);
    myOled.clearDisplay();   
    
    Timer t2;
    Timer t3;
    t2.start();
    t3.start();
    while(t2.read()<=3)
    {
    
        while(t3.read_ms()<=111)
        {
            myOled.drawBitmap(30,0,figure1, 64,64,WHITE);
            myOled.setTextCursor(32,50);
            myOled.printf("Window 21\n");
            myOled.display();
        }
        while(t3.read_ms()<=222)
        {
            myOled.clearDisplay(); 
            myOled.drawBitmap(30,0,figure2, 64,64,WHITE);
            myOled.setTextCursor(32,50);
            myOled.printf("Window 21\n");
            myOled.display();
        }
        while(t3.read_ms()<=333)
        {
            myOled.clearDisplay(); 
            myOled.drawBitmap(30,0,figure3, 64,64,WHITE);
            myOled.setTextCursor(32,50);
            myOled.printf("Window 21\n");
            myOled.display();
        }
        while(t3.read_ms()<=444)
        {
            myOled.clearDisplay(); 
            myOled.drawBitmap(30,0,figure4, 64,64,WHITE);
            myOled.setTextCursor(32,50);
            myOled.printf("Window 21\n");
            myOled.display();
        }
        while(t3.read_ms()<=555)
        {
            myOled.clearDisplay(); 
            myOled.drawBitmap(30,0,figure5, 64,64,WHITE);
            myOled.setTextCursor(32,50);
            myOled.printf("Window 21\n");
            myOled.display();
        }
        t3.reset();
        myOled.clearDisplay(); // 이 코드는 첫번째와 마지막번째의 그림이 겹치는걸 막아줌
    }
    myOled.drawBitmap(30,0,figure4, 64,64,WHITE);
    myOled.setTextCursor(32,50);
    myOled.printf("Window 21\n");
    myOled.display();    
    t2.stop();
    t3.stop();
    //myOled.setTextCursor(32,50);
    //myOled.printf("Window 21\n");
    //myOled.display();
    
}

void push_button_short2()
{
    if (myswitch.read()) // 스위치를 누르면 참(1을 반환)
        {
            wait_ms(700);
            if (myswitch.read())
            {
                return;
            }
            //push_button_long();
            
            /////////////////////////////////////////////
            
            float temp = 0.0;
            float amb_temp = 0.0;
            int16_t ir_data = 0;

            float final_temp = 0.0;
            float final_amb_temp = 0.0;
            int num = 0;
            
            float t_list[50] = {};                 // 배열 크기 50 선언
            float max_temp[1] = {}; // 배열 크기 1 선언 리스트의 첫번째 칸 값을 최댓값에 대입
            
            t1.start();
            num=0;
            final_temp = 0.0;
            final_amb_temp = 0.0;
        
            while(t1.read()<=1.5)          // 3초동안 계산한다
            { 
                myOled.setTextCursor(0,0);
                myOled.clearDisplay();
                myOled.drawBitmap(10,0,ECG,126,62,WHITE);
                myOled.printf("...\n");
                myOled.display();
                   
                if (getTemp(&temp)& getTempAmbient(&amb_temp) & getRawIR(&ir_data)) //3개의 값이 있다면
                {
                    //final_temp = final_temp + temp;
                    //final_amb_temp = final_amb_temp + amb_temp;
                    final_amb_temp = amb_temp + ir_data*0.01948866/0.98+0.653780167;
                    t_list[num] = final_amb_temp;
                    pc.printf("%5.1f\n", final_amb_temp);
                    num=num+1;
                }
            
            }
            
            for(int i=0; i<25 ;i++) // 1.5초동안 측정시 약 14개정도 받음
            {
                if(t_list[i]>max_temp[0]) 
                {
                    max_temp[0] = t_list[i]; 
                }
            }          
            
            if (max_temp[0] <= 36)// if 36도보다 낮으면 저체온
            {
                myOled.setTextCursor(0,20);
                myOled.clearDisplay();
                //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
                myOled.drawBitmap(70,0,tem1,64,64,WHITE);
                myOled.drawCircle(65, 10, 5, WHITE);
                myOled.setTextSize(2);    
                myOled.printf("%5.1f F",(max_temp[0]*1.8)+32);   
                myOled.display();  
                t1.stop();
                t1.reset();
                wait(3);
            }
            else if (max_temp[0] <= 36.4 && max_temp[0] > 36)   // 36.4도 보다 낮고 36보다 크면 정상
            {
                myOled.setTextCursor(0,20);
                myOled.clearDisplay();
                //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
                myOled.drawBitmap(70,0,tem2,64,64,WHITE);
                myOled.drawCircle(65, 10, 5, WHITE);
                myOled.setTextSize(2);    
                myOled.printf("%5.1f F",(max_temp[0]*1.8)+32);   
                myOled.display();  
                t1.stop();
                t1.reset();
                wait(3);
            }
        /*else if (max_temp[0]%36.5 == 0)          36.5 빵빠레
        {
            myOled.setTextCursor(0,20);
            myOled.clearDisplay();
            //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
            myOled.drawBitmap(0,0,bambam,128,64,WHITE);
            //myOled.drawCircle(65, 10, 5, WHITE);
            //myOled.setTextSize(3);    
            //myOled.printf("%5.1f C",final_amb_temp/num, BLACK);   
            myOled.display();  
            t1.stop();
            t1.reset();
            wait(3);
        }
        */
            else if (max_temp[0] <= 37.5 && max_temp[0] >= 36.6)     // 36.6보다 크고 37.5보다 낮으면 정상
            {
                myOled.setTextCursor(0,20);
                myOled.clearDisplay();
                //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
                myOled.drawBitmap(70,0,tem2,64,64,WHITE);
                myOled.drawCircle(65, 10, 5, WHITE);
                myOled.setTextSize(2);    
                myOled.printf("%5.1f F",(max_temp[0]*1.8)+32);   
                myOled.display();  
                t1.stop();
                t1.reset();
                wait(3);
            }
            else if (max_temp[0] > 37.5)          // 37.5보다 높으면 고온
            {
                myOled.setTextCursor(0,20);
                myOled.clearDisplay();
                //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
                myOled.drawBitmap(70,0,tem3,64,64,WHITE);
                myOled.drawCircle(65, 10, 5, WHITE);
                myOled.setTextSize(2);    
                myOled.printf("%5.1f F",(max_temp[0]*1.8)+32);    
                myOled.display();  
                t1.stop();
                t1.reset();
                wait(3);
            }
                    
            else
            {
                myOled.setTextCursor(0,20);
                myOled.clearDisplay();
                //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
                myOled.drawBitmap(0,0,bambam,128,64,WHITE);
                //myOled.drawCircle(65, 10, 5, WHITE);
                //myOled.setTextSize(2);    
                //myOled.printf("%5.1f C",max_temp[0]);   
                myOled.display();  
                t1.stop();
                t1.reset();
                wait(3);                
            }
/////////////////////////////////////////////////////////////////////////                
            /*myOled.setTextCursor(0,20);
            myOled.clearDisplay();
            //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
            myOled.drawCircle(100, 10, 5, WHITE);
            myOled.setTextSize(3);    
            myOled.printf("%5.1f F",(max_temp[0]*1.8)+32);   
            myOled.display();  
            t1.stop();
            t1.reset();
            wait(3);*/
///////////////////////////////////////////////////////////////////////////        
        }
}

void push_button_short()
{
    if (myswitch.read()) // 스위치를 누르면 참(1을 반환)
        {
            wait_ms(700);
            if (myswitch.read())
            {
                return;
            }
            //push_button_long();
            
            /////////////////////////////////////////////
            
            float temp = 0.0;
            float amb_temp = 0.0;
            int16_t ir_data = 0;

            float final_temp = 0.0;
            float final_amb_temp = 0.0;
            int num = 0;
            
            float t_list[50] = {};                 // 배열 크기 50 선언
            float max_temp[1] = {}; // 배열 크기 1 선언 리스트의 첫번째 칸 값을 최댓값에 대입
            
            t1.start();
            num=0;
            final_temp = 0.0;
            final_amb_temp = 0.0;
        
            while(t1.read()<=1.5)          // 3초동안 계산한다
            { 
                myOled.setTextCursor(0,0);
                myOled.clearDisplay();
                myOled.drawBitmap(10,0,ECG,126,62,WHITE);
                myOled.printf("...\n");
                myOled.display();
                   
                if (getTemp(&temp)& getTempAmbient(&amb_temp) & getRawIR(&ir_data)) // 3개의 값이 있다면
                {
                    //final_temp = final_temp + temp;
                    //final_amb_temp = final_amb_temp + amb_temp;
                    final_amb_temp = amb_temp + ir_data*0.01948866/0.98+0.653780167; // 방사율이 클수록 1에 가까울수록 값이 작음 
                    t_list[num] = final_amb_temp;
                    pc.printf("%5.1f\n", final_amb_temp);
                    num=num+1;
                }
            
            }
            
            for(int i=0; i<25 ;i++) // 1.5초동안 측정시 약 14개정도 받음
            {
                if(t_list[i]>max_temp[0]) 
                {
                    max_temp[0] = t_list[i]; 
                }
            }
            if (max_temp[0] <= 36)// if 36도보다 낮으면 저체온 
            {
                myOled.setTextCursor(0,20);
                myOled.clearDisplay();
                //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
                myOled.drawBitmap(70,0,tem1,64,64,WHITE);
                myOled.drawCircle(65, 10, 5, WHITE);
                myOled.setTextSize(2);    
                myOled.printf("%5.1f C",max_temp[0]);   
                myOled.display();  
                t1.stop();
                t1.reset();
                wait(3);
            }
            else if (max_temp[0] <= 36.4 && max_temp[0] > 36)   // 36.4도 보다 낮고 36보다 크면 정상
            {
                myOled.setTextCursor(0,20);
                myOled.clearDisplay();
                //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
                myOled.drawBitmap(70,0,tem2,64,64,WHITE);
                myOled.drawCircle(65, 10, 5, WHITE);
                myOled.setTextSize(2);    
                myOled.printf("%5.1f C",max_temp[0]);   
                myOled.display();  
                t1.stop();
                t1.reset();
                wait(3);
            }
        /*else if (max_temp[0]%36.5 == 0)          36.5 빵빠레
        {
            myOled.setTextCursor(0,20);
            myOled.clearDisplay();
            //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
            myOled.drawBitmap(0,0,bambam,128,64,WHITE);
            //myOled.drawCircle(65, 10, 5, WHITE);
            //myOled.setTextSize(3);    
            //myOled.printf("%5.1f C",final_amb_temp/num, BLACK);   
            myOled.display();  
            t1.stop();
            t1.reset();
            wait(3);
        }
        */
            else if (max_temp[0] <= 37.5 && max_temp[0] >= 36.6)     // 36.6보다 크고 37.5보다 낮으면 정상
            {
                myOled.setTextCursor(0,20);
                myOled.clearDisplay();
                //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
                myOled.drawBitmap(70,0,tem2,64,64,WHITE);
                myOled.drawCircle(65, 10, 5, WHITE);
                myOled.setTextSize(2);    
                myOled.printf("%5.1f C",max_temp[0]);   
                myOled.display();  
                t1.stop();
                t1.reset();
                wait(3);
            }
            else if (max_temp[0] > 37.5)          // 37.5보다 높으면 고온          
            {
                myOled.setTextCursor(0,20);
                myOled.clearDisplay();
                //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
                myOled.drawBitmap(70,0,tem3,64,64,WHITE);
                myOled.drawCircle(65, 10, 5, WHITE);
                myOled.setTextSize(2);    
                myOled.printf("%5.1f C",max_temp[0]);    
                myOled.display();  
                t1.stop();
                t1.reset();
                wait(3);
            }
                    
            else
            {
                myOled.setTextCursor(0,20);
                myOled.clearDisplay();
                //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
                myOled.drawBitmap(0,0,bambam,128,64,WHITE);
                //myOled.drawCircle(65, 10, 5, WHITE);
                //myOled.setTextSize(2);    
                //myOled.printf("%5.1f C",max_temp[0]);   
                myOled.display();  
                t1.stop();
                t1.reset();
                wait(3);                
            }
            return ;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////                
            /*myOled.setTextCursor(0,20);
            myOled.clearDisplay();
            //myOled.printf("Surf Tem: %5.2f\n",final_temp/num);
            myOled.drawCircle(100, 10, 5, WHITE);
            myOled.setTextSize(3);    
            myOled.printf("%5.1f C",max_temp[0]);   
            myOled.display();  
            t1.stop();
            t1.reset();
            wait(3);*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////        
        }
}    


/* void push_button_long2()
{
    wait_ms(400); // 0.4초 동안 기다려라 다음 스위치 버튼 누르는걸 받아내기 위함 (스위치를 누르고 때는 시간을 추측)
            /////////////////////////////////////////////
            
    if (myswitch.read()) // 0.4초 ~ 1초 사이에 누르면 다른 옵션 실행(누르고있으면)
    {
        return;          // 무한루프 탈출
    }    
}
*/

void push_button_long()
{
    //wait_ms(400); // 0.4초 동안 기다려라 다음 스위치 버튼 누르는걸 받아내기 위함 (스위치를 누르고 때는 시간을 추측)
            /////////////////////////////////////////////
            
    if (myswitch.read()) // 0.4초 ~ 1초 사이에 누르면 다른 옵션 실행(누르고있으면)
    {
        myOled.clearDisplay();
        wait_ms(700);
        myOled.clearDisplay();
        Timer c1;
        c1.start();
        
        while(1)
        {
            myled_R = !myled_R;    
            c1.start();
            while(c1.read_ms()<=1200)
            {
                left_push_button2();
                push_button_short2();
                if (myswitch.read())
                {
                    return;   
                }
                //push_button_long2(); 
                //left_push_button2();
        
            }
            if (c1.read_ms()<1200)
            {
                wait_ms(700);
                return;    
            }
            myOled.clearDisplay();
            while(c1.read_ms()<=2400)
            {   
        
                right_push_button2();
                push_button_short2();
                if (myswitch.read())
                {
                    return;   
                }
                //push_button_long2(); 
                //right_push_button2();
        
            }
            if (c1.read_ms()<2400)
            {
                wait_ms(700);
                return;   
            }    
            myOled.clearDisplay();
            c1.reset();
        }
        myOled.clearDisplay();           
        //return;
    }    
}


///////////////////////////////////////////////////////////////////////////////////

int main()
{ 
/*
float temp = 0.0;
float amb_temp = 0.0;        
int16_t ir_data = 0;               // 변수 정보들~~~~~~~~~~~~~~

float final_temp = 0.0;
float final_amb_temp = 0.0;
int num = 0;
*/

pc.printf("===============Hello world===============\n\r");
myOled_config();
myOled_startwindow();
myswitch.mode(PullDown); // 스위치 활성화
   
Timer b2;                 //
                          //     버튼 누르면 온도측정 함수 실행
b2.start();               //
myOled.clearDisplay();    //



while(1)
{
    myled_R = !myled_R;    
       
    while(b2.read_ms()<=1200)
    {
        
        push_button_short();
        push_button_long(); 
        myOled.clearDisplay();
        left_push_button();
        
    }
    myOled.clearDisplay();
    while(b2.read_ms()<=2400)
    {   
        
        push_button_short();
        push_button_long(); 
        myOled.clearDisplay();
        right_push_button();
        
    }    
    myOled.clearDisplay();
    b2.reset();
    
}
}            